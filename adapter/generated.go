// Code generated by github.com/ngicks/iterator/cmd/methodgen. DO NOT EDIT.
//
//methodgen:ignore=all
package adapter

import "github.com/ngicks/iterator/def"

// SizeHint
func (iter Enumerator[T]) SizeHint() int {
	if sizeHinter, ok := iter.inner.(def.SizeHinter); ok {
		return sizeHinter.SizeHint()
	}
	return -1
}
func (iter Mapper[T, U]) SizeHint() int {
	if sizeHinter, ok := iter.inner.(def.SizeHinter); ok {
		return sizeHinter.SizeHint()
	}
	return -1
}
func (iter ReversedDeIter[T]) SizeHint() int {
	if sizeHinter, ok := iter.DeIterator.(def.SizeHinter); ok {
		return sizeHinter.SizeHint()
	}
	return -1
}
func (iter SameTyMapper[T]) SizeHint() int {
	if sizeHinter, ok := iter.inner.(def.SizeHinter); ok {
		return sizeHinter.SizeHint()
	}
	return -1
}

// Reverse
func (iter Excluder[T]) ReverseRaw() (rev *Excluder[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &Excluder[T]{
			inner:    reversedInner,
			excluder: iter.excluder,
		}, true
	}
	return nil, false
}
func (iter Excluder[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
func (iter Mapper[T, U]) ReverseRaw() (rev *Mapper[T, U], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &Mapper[T, U]{
			inner:  reversedInner,
			mapper: iter.mapper,
		}, true
	}
	return nil, false
}
func (iter Mapper[T, U]) Reverse() (rev def.SeIterator[U], ok bool) {
	return iter.ReverseRaw()
}
func (iter NSkipper[T]) ReverseRaw() (rev *NSkipper[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &NSkipper[T]{
			inner: reversedInner,
			n:     iter.n,
		}, true
	}
	return nil, false
}
func (iter NSkipper[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
func (iter NTaker[T]) ReverseRaw() (rev *NTaker[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &NTaker[T]{
			inner: reversedInner,
			n:     iter.n,
		}, true
	}
	return nil, false
}
func (iter NTaker[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
func (iter SameTyMapper[T]) ReverseRaw() (rev *SameTyMapper[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &SameTyMapper[T]{
			inner:  reversedInner,
			mapper: iter.mapper,
		}, true
	}
	return nil, false
}
func (iter SameTyMapper[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
func (iter Selector[T]) ReverseRaw() (rev *Selector[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &Selector[T]{
			inner:    reversedInner,
			selector: iter.selector,
		}, true
	}
	return nil, false
}
func (iter Selector[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
func (iter WhileSkipper[T]) ReverseRaw() (rev *WhileSkipper[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &WhileSkipper[T]{
			inner:        reversedInner,
			isOutOfWhile: iter.isOutOfWhile,
			skipIf:       iter.skipIf,
		}, true
	}
	return nil, false
}
func (iter WhileSkipper[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
func (iter WhileTaker[T]) ReverseRaw() (rev *WhileTaker[T], ok bool) {
	if reversedInner, ok := Reverse(iter.inner); ok {
		return &WhileTaker[T]{
			inner:        reversedInner,
			isOutOfWhile: iter.isOutOfWhile,
			takeIf:       iter.takeIf,
		}, true
	}
	return nil, false
}
func (iter WhileTaker[T]) Reverse() (rev def.SeIterator[T], ok bool) {
	return iter.ReverseRaw()
}
